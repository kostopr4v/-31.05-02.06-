from aiogram import Router, types, F
from aiogram.types import Message, FSInputFile
import json
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot import conn, cursor, bot
import hashlib
import fire
from interact_llama3_llamacpp import interact, SYSTEM_PROMPT
from tts_model import text2speech
from pp import get_sim

router = Router()
content = ''
query = ''

def replace_stars(input_string):
    words = input_string.split('**')
    result = ''
    for i, word in enumerate(words):
        if i % 2 == 1:
            result += '<b>' + word + '</b>'
        else:
            result += word
    return result


@router.message(Command('delete_history'))
async def delete_history(message: Message):
    chat_id = str(message.chat.id)
    result = hashlib.md5(chat_id.encode())
    result = str(result.hexdigest())
    cursor.execute(f"""
        DELETE FROM users
    WHERE user_id=?""", (result,))
    hist = [{"role": "system", "content": SYSTEM_PROMPT}]
    hist = json.dumps(hist)
    cursor.execute(f"""INSERT INTO users(user_id, history)
        VALUES  (?, ?)""", (result, hist))
    conn.commit()
    await message.answer('–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!')


@router.message(Command('start'))
async def start_handler(message: Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.username}, —è –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ–∞. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?")

    chat_id = str(message.chat.id)
    result = hashlib.md5(chat_id.encode())
    result = str(result.hexdigest())
    dat = cursor.execute("""SELECT * from users WHERE user_id=?""", (result,)).fetchall()
    if len(dat) == 0:
        hist = [{"role": "system", "content": SYSTEM_PROMPT}]
        hist = json.dumps(hist)
        cursor.execute(f"""INSERT INTO users(user_id, history)
            VALUES  (?, ?)""", (result, hist))
        conn.commit()


async def edit_msg(message: types.Message, text):
    await message.edit_text(text)


@router.message()
async def any_message(message: Message):
    wait_msg = await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç!')
    global content, query

    if message.voice != None:
        from whisper_model import transcribe_audio

        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.send_chat_action(message.chat.id, 'typing')
        await bot.download_file(file_path, f"{message.chat.id}.mp3")
        await bot.send_chat_action(message.chat.id, 'typing')
        text = transcribe_audio(f"{message.chat.id}.mp3")
        await bot.send_chat_action(message.chat.id, 'typing')
        chat_id = str(message.chat.id)
        result = hashlib.md5(chat_id.encode())
        result = str(result.hexdigest())
        dat = cursor.execute("""SELECT * from users WHERE user_id=?""", (result,)).fetchall()
        if len(dat) == 0:
            hist = []
        else:
            hist = json.loads(dat[0][1])
        hist.append({"role": "user", "content": text})
        await bot.send_chat_action(message.chat.id, 'typing')
        print(text)
        count_simbols = 0
        i = len(hist) - 1
        await bot.send_chat_action(message.chat.id, 'typing')
        while count_simbols < 2000 and i >= 0:
            count_simbols += len(hist[i]["content"])
            i -= 1
        await bot.send_chat_action(message.chat.id, 'typing')
        if count_simbols >= 2000:
            hist = hist[i + 1:]
        await bot.send_chat_action(message.chat.id, 'typing')
        data = get_sim(text)
        if data[0][0] < 0.88:
          content = str(fire.Fire(interact(messages=hist)))
        else:
          content = data[0][4]
        
        content += f'\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: \n{data[0][2]}\n{data[1][2]}\n{data[2][2]}'
        query = text
        await bot.send_chat_action(message.chat.id, 'typing')
        hist.append({"role": "assistant", "content": content})
        hist = json.dumps(hist)

        await bot.delete_message(message.chat.id, wait_msg.message_id)

        await message.answer(replace_stars(content), parse_mode='html')
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üëç",
            callback_data="show")
        )
        builder.add(types.InlineKeyboardButton(
            text="üëé",
            callback_data="hide")
        )

        await message.answer('–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç?', reply_markup=builder.as_markup())
    else:
        if str(message.text)[0] == '/':
            await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')
        else:
            if len(message.text) < 2000:
                await bot.send_chat_action(message.chat.id, 'typing')
                chat_id = str(message.chat.id)
                result = hashlib.md5(chat_id.encode())
                result = str(result.hexdigest())
                dat = cursor.execute("""SELECT * from users WHERE user_id=?""", (result,)).fetchall()
                if len(dat) == 0:
                    hist = []
                else:
                    hist = json.loads(dat[0][1])
                hist.append({"role": "user", "content": message.text})
                await bot.send_chat_action(message.chat.id, 'typing')
                print(message.text)
                count_simbols = 0
                i = len(hist) - 1
                await bot.send_chat_action(message.chat.id, 'typing')
                while count_simbols < 2000 and i >= 0:
                    count_simbols += len(hist[i]["content"])
                    i -= 1
                await bot.send_chat_action(message.chat.id, 'typing')
                if count_simbols >= 2000:
                    hist = hist[i + 1:]
                await bot.send_chat_action(message.chat.id, 'typing')
                data = get_sim(message.text)
                if data[0][0] < 0.88:
                  content = str(fire.Fire(interact(messages=hist)))
                else:
                  content = data[0][4]
                
                content += f'\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: \n{data[0][2]}\n{data[1][2]}\n{data[2][2]}'
                query = message.text
                await bot.send_chat_action(message.chat.id, 'typing')
                hist = json.dumps(hist)
                await message.answer(replace_stars(content), parse_mode='html')
                await bot.delete_message(message.chat.id, wait_msg.message_id)

                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(
                    text="üëç",
                    callback_data="show")
                )
                builder.add(types.InlineKeyboardButton(
                    text="üëé",
                    callback_data="hide")
                )

                await message.answer('–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç?', reply_markup=builder.as_markup())
            else:
                await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–µ–º.")

@router.callback_query(F.data == 'like')
async def like(callback: types.CallbackQuery):
    await callback.message.answer('–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ä–µ—à–∏–ª—Å—è! –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –º–µ–Ω—è —Å–ø—Ä–æ—Å–∏—Ç—å –æ–± —ç—Ç–æ–º!')
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    cursor.execute(f"""INSERT INTO likes(user_id, like, query, answer)
            VALUES  (?, ?, ?, ?)""", (callback.message.chat.id, 1, query, content))
    conn.commit()
   

@router.callback_query(F.data == 'dislike')
async def like(callback: types.CallbackQuery):
    await callback.message.answer('–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –º–æ–π –æ—Ç–≤–µ—Ç –í–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª. –ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –º–µ–Ω—è —Å–ø—Ä–æ—Å–∏—Ç—å –æ–± —ç—Ç–æ–º!')
    await bot.delete_message(callback.message.chat.id, callback.message.message_id)
    cursor.execute(f"""INSERT INTO likes(user_id, like, query, answer)
        VALUES  (?, ?, ?, ?)""", (callback.message.chat.id, 0, query, content))
    conn.commit()


@router.callback_query(F.data == 'show')
async def like(callback: types.CallbackQuery):
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        wait = await callback.message.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ!')
        text2speech(content, f"{callback.message.chat.id}.ogg")

        audio = FSInputFile(f"{callback.message.chat.id}.ogg")
        await bot.send_voice(callback.message.chat.id, audio)
        await bot.delete_message(callback.message.chat.id, wait.message_id)

        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üëç",
            callback_data="like")
        )
        builder.add(types.InlineKeyboardButton(
            text="üëé",
            callback_data="dislike")
        )

        await callback.message.answer('–†–µ—à–∏–ª—Å—è –ª–∏ –í–∞—à –≤–æ–ø—Ä–æ—Å?', reply_markup=builder.as_markup())

@router.callback_query(F.data == 'hide')
async def like(callback: types.CallbackQuery):
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)

        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üëç",
            callback_data="like")
        )
        builder.add(types.InlineKeyboardButton(
            text="üëé",
            callback_data="dislike")
        )

        await callback.message.answer('–†–µ—à–∏–ª—Å—è –ª–∏ –í–∞—à –≤–æ–ø—Ä–æ—Å?', reply_markup=builder.as_markup())